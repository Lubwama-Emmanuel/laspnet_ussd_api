// import { ConnectionOptions, Connection, createConnection, getConnection } from 'typeorm';
// tslint:disable-next-line: no-import-side-effect
// import 'reflect-metadata';
// import { Payload, TokenPayload } from './models';
// import { _countParalegalReferrals, _countParalegalOpenCases, _countParalegalClosedCases } from './lib';
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const typeorm = require("typeorm");
const AppError = require("./../utils/appError");
// exports.prod = process.env.NODE_EVE === 'prodcution';
const secret_key =
  "\xcf\x91\x88\xd4L{\x98\x92\xa4\xa4\xbe\xbc\xb4\x14\xdeQ\x9c\xbb5\x1f&ei\x8d\xf4\x983\xce\xed\xa4*\xc4\xd3\xa6`b\x89\x95\xd6\x08\xbe\xe8\xedH\x81\x81C\xc7h\x01";

const config = {
  // name: "devMachine",
  // type: "mysql",
  // host: "localhost",
  // port: 3306,
  // username: "root",
  // database: "b15_25973112_iims",
  // password: "",
  // synchronize: true,
  // logging: false,
  // connectTimeout: 540000,
  // acquireTimeout: 540000,

  // Production Mode
  // ...(prod && {
      // name: 'devMachine',
      // type: 'mysql',
      // port: 3306,
      // host: 'db.laspnet.org',
      // username: 'lasptorg_lasp_test',
      // database: 'lasptorg_lasp_test',
      // password: 'A2j@6102',
      // logging: true,
      // synchronize: false,
      // connectTimeout: 540000,
      name: 'devMachine',
      type: 'mysql',
      port: 3306,
      host: 'db.laspnet.org',
      username: 'lasptorg_code_bits_test',
      database: 'lasptorg_code_bits_test',
      password: 'A2j@6102',
      logging: true,
      synchronize: false,
      connectTimeout: 540000,
  acquireTimeout: 540000,
  // })
};

exports._connect = async () => {
  let connection;

  try {
    connection = typeorm.getConnection(config.name);
  } catch (err) {
    connection = await typeorm.createConnection(config);
  }

  return connection;
};

exports._generateToken = (paralegal_id, firm_id, remember_me) => {
  let payload;

  try {
    const token = jwt.sign(
      {
        paralegal_id,
        firm_id,
      },
      secret_key,
      {
        expiresIn: remember_me === "true" ? "6d" : "2h",
        algorithm: "HS384",
      }
    );
    payload = {
      token: token,
      exp: remember_me === "true" ? 60 * 60 * 24 * 6 : 60 * 60 * 2,
    };
  } catch (error) {}

  return payload;
};

exports._verifyToken = (token) => {
  let payload;

  try {
    const decoded = jwt.verify(token, secret_key);
    payload = {
      paralegal_id: decoded.paralegal_id,
      firm_id: decoded.firm_id,
    };
  } catch (error) {
    console.log("the error from verify is", error);
  }

  return payload;
};

exports.sendNotification = async (token, payload) => {
  // const options = {
  //     priority: "high",
  //     timeToLive: 2419200,
  //     contentAvailable: true
  // }
  const status = false;

  // try {
  //     const results = await admin.messaging().sendToDevice([token], payload, options);
  //     console.log('results:', results);
  //     status = results.successCount ? true : false;
  // } catch (error) {
  //     console.log('error:', error);
  //     status = false;
  // }

  return status;
};

exports._sendEmail = async (recipient, subject, text_message, html_message) => {
  try {
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "laspnet.ug@gmail.com",
        pass: "ghbskxjwqochlzyo",
      },
    });

    const html_message_header =
      "<div style='background-color: #0088cc; padding: 100px 0px;'><div style='background-color: #ffffff; max-width: 600px; margin: auto; padding: 20px;'>";
    const html_message_footer =
      "</div>" +
      '  <div style="width: 600px; margin: auto; background-color: #333f3c; padding: 20px; color: #cbcbcb; font-weight: 200; font-size: 12px; box-shadow: 0px 47px 26px -15px #000000b3;">' +
      "      <p style='width: 100%; text-align: center; margin: 0px;'>This email is autogenerated. Please do not reply</p>" +
      "      <div style='text-align: center;'><a style='color: #0088cc' href='http://iims.laspnet.org/' target='_blank'>iims.laspnet.org</a></div>" +
      "  </div>";
    ("+</div>");

    const mailOptions = {
      from: "admin@laspnet.com",
      to: recipient,
      subject: subject,
      text: text_message,
      html: html_message_header + html_message + html_message_footer,
    };

    return await transporter.sendMail(mailOptions);
  } catch (error) {
    console.log("error sending email", error);
    new AppError("failed to send email", 403);
  }
};
